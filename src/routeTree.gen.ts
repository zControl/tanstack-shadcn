/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DocsImport } from './routes/_docs'
import { Route as AuthImport } from './routes/_auth'
import { Route as DocsDocsImport } from './routes/_docs.docs'
import { Route as AuthDashboardImport } from './routes/_auth.dashboard'
import { Route as examplesExamplesImport } from './routes/(examples)/_examples'
import { Route as examplesExamplesExamplesImport } from './routes/(examples)/_examples/examples'

// Create Virtual Routes

const examplesImport = createFileRoute('/(examples)')()
const TermsLazyImport = createFileRoute('/terms')()
const StatusLazyImport = createFileRoute('/status')()
const PrivacyLazyImport = createFileRoute('/privacy')()
const IndexLazyImport = createFileRoute('/')()
const examplesExamplesQueryLazyImport = createFileRoute(
  '/(examples)/_examples/query',
)()
const examplesExamplesFormLazyImport = createFileRoute(
  '/(examples)/_examples/form',
)()

// Create/Update Routes

const examplesRoute = examplesImport.update({
  id: '/(examples)',
  getParentRoute: () => rootRoute,
} as any)

const TermsLazyRoute = TermsLazyImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/terms.lazy').then((d) => d.Route))

const StatusLazyRoute = StatusLazyImport.update({
  id: '/status',
  path: '/status',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/status.lazy').then((d) => d.Route))

const PrivacyLazyRoute = PrivacyLazyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/privacy.lazy').then((d) => d.Route))

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DocsRoute = DocsImport.update({
  id: '/_docs',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DocsDocsRoute = DocsDocsImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => DocsRoute,
} as any)

const AuthDashboardRoute = AuthDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

const examplesExamplesRoute = examplesExamplesImport.update({
  id: '/_examples',
  getParentRoute: () => examplesRoute,
} as any)

const examplesExamplesQueryLazyRoute = examplesExamplesQueryLazyImport
  .update({
    id: '/query',
    path: '/query',
    getParentRoute: () => examplesExamplesRoute,
  } as any)
  .lazy(() =>
    import('./routes/(examples)/_examples/query.lazy').then((d) => d.Route),
  )

const examplesExamplesFormLazyRoute = examplesExamplesFormLazyImport
  .update({
    id: '/form',
    path: '/form',
    getParentRoute: () => examplesExamplesRoute,
  } as any)
  .lazy(() =>
    import('./routes/(examples)/_examples/form.lazy').then((d) => d.Route),
  )

const examplesExamplesExamplesRoute = examplesExamplesExamplesImport.update({
  id: '/examples',
  path: '/examples',
  getParentRoute: () => examplesExamplesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_docs': {
      id: '/_docs'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DocsImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyLazyImport
      parentRoute: typeof rootRoute
    }
    '/status': {
      id: '/status'
      path: '/status'
      fullPath: '/status'
      preLoaderRoute: typeof StatusLazyImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsLazyImport
      parentRoute: typeof rootRoute
    }
    '/(examples)': {
      id: '/(examples)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof examplesImport
      parentRoute: typeof rootRoute
    }
    '/(examples)/_examples': {
      id: '/(examples)/_examples'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof examplesExamplesImport
      parentRoute: typeof examplesRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthImport
    }
    '/_docs/docs': {
      id: '/_docs/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsDocsImport
      parentRoute: typeof DocsImport
    }
    '/(examples)/_examples/examples': {
      id: '/(examples)/_examples/examples'
      path: '/examples'
      fullPath: '/examples'
      preLoaderRoute: typeof examplesExamplesExamplesImport
      parentRoute: typeof examplesExamplesImport
    }
    '/(examples)/_examples/form': {
      id: '/(examples)/_examples/form'
      path: '/form'
      fullPath: '/form'
      preLoaderRoute: typeof examplesExamplesFormLazyImport
      parentRoute: typeof examplesExamplesImport
    }
    '/(examples)/_examples/query': {
      id: '/(examples)/_examples/query'
      path: '/query'
      fullPath: '/query'
      preLoaderRoute: typeof examplesExamplesQueryLazyImport
      parentRoute: typeof examplesExamplesImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashboardRoute: AuthDashboardRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface DocsRouteChildren {
  DocsDocsRoute: typeof DocsDocsRoute
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsDocsRoute: DocsDocsRoute,
}

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren)

interface examplesExamplesRouteChildren {
  examplesExamplesExamplesRoute: typeof examplesExamplesExamplesRoute
  examplesExamplesFormLazyRoute: typeof examplesExamplesFormLazyRoute
  examplesExamplesQueryLazyRoute: typeof examplesExamplesQueryLazyRoute
}

const examplesExamplesRouteChildren: examplesExamplesRouteChildren = {
  examplesExamplesExamplesRoute: examplesExamplesExamplesRoute,
  examplesExamplesFormLazyRoute: examplesExamplesFormLazyRoute,
  examplesExamplesQueryLazyRoute: examplesExamplesQueryLazyRoute,
}

const examplesExamplesRouteWithChildren =
  examplesExamplesRoute._addFileChildren(examplesExamplesRouteChildren)

interface examplesRouteChildren {
  examplesExamplesRoute: typeof examplesExamplesRouteWithChildren
}

const examplesRouteChildren: examplesRouteChildren = {
  examplesExamplesRoute: examplesExamplesRouteWithChildren,
}

const examplesRouteWithChildren = examplesRoute._addFileChildren(
  examplesRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof examplesExamplesRouteWithChildren
  '': typeof DocsRouteWithChildren
  '/login': typeof LoginRoute
  '/privacy': typeof PrivacyLazyRoute
  '/status': typeof StatusLazyRoute
  '/terms': typeof TermsLazyRoute
  '/dashboard': typeof AuthDashboardRoute
  '/docs': typeof DocsDocsRoute
  '/examples': typeof examplesExamplesExamplesRoute
  '/form': typeof examplesExamplesFormLazyRoute
  '/query': typeof examplesExamplesQueryLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof examplesExamplesRouteWithChildren
  '': typeof DocsRouteWithChildren
  '/login': typeof LoginRoute
  '/privacy': typeof PrivacyLazyRoute
  '/status': typeof StatusLazyRoute
  '/terms': typeof TermsLazyRoute
  '/dashboard': typeof AuthDashboardRoute
  '/docs': typeof DocsDocsRoute
  '/examples': typeof examplesExamplesExamplesRoute
  '/form': typeof examplesExamplesFormLazyRoute
  '/query': typeof examplesExamplesQueryLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_docs': typeof DocsRouteWithChildren
  '/login': typeof LoginRoute
  '/privacy': typeof PrivacyLazyRoute
  '/status': typeof StatusLazyRoute
  '/terms': typeof TermsLazyRoute
  '/(examples)': typeof examplesRouteWithChildren
  '/(examples)/_examples': typeof examplesExamplesRouteWithChildren
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_docs/docs': typeof DocsDocsRoute
  '/(examples)/_examples/examples': typeof examplesExamplesExamplesRoute
  '/(examples)/_examples/form': typeof examplesExamplesFormLazyRoute
  '/(examples)/_examples/query': typeof examplesExamplesQueryLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/privacy'
    | '/status'
    | '/terms'
    | '/dashboard'
    | '/docs'
    | '/examples'
    | '/form'
    | '/query'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/privacy'
    | '/status'
    | '/terms'
    | '/dashboard'
    | '/docs'
    | '/examples'
    | '/form'
    | '/query'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_docs'
    | '/login'
    | '/privacy'
    | '/status'
    | '/terms'
    | '/(examples)'
    | '/(examples)/_examples'
    | '/_auth/dashboard'
    | '/_docs/docs'
    | '/(examples)/_examples/examples'
    | '/(examples)/_examples/form'
    | '/(examples)/_examples/query'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRoute: typeof AuthRouteWithChildren
  DocsRoute: typeof DocsRouteWithChildren
  LoginRoute: typeof LoginRoute
  PrivacyLazyRoute: typeof PrivacyLazyRoute
  StatusLazyRoute: typeof StatusLazyRoute
  TermsLazyRoute: typeof TermsLazyRoute
  examplesRoute: typeof examplesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRoute: AuthRouteWithChildren,
  DocsRoute: DocsRouteWithChildren,
  LoginRoute: LoginRoute,
  PrivacyLazyRoute: PrivacyLazyRoute,
  StatusLazyRoute: StatusLazyRoute,
  TermsLazyRoute: TermsLazyRoute,
  examplesRoute: examplesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_docs",
        "/login",
        "/privacy",
        "/status",
        "/terms",
        "/(examples)"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/dashboard"
      ]
    },
    "/_docs": {
      "filePath": "_docs.tsx",
      "children": [
        "/_docs/docs"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/privacy": {
      "filePath": "privacy.lazy.tsx"
    },
    "/status": {
      "filePath": "status.lazy.tsx"
    },
    "/terms": {
      "filePath": "terms.lazy.tsx"
    },
    "/(examples)": {
      "filePath": "(examples)",
      "children": [
        "/(examples)/_examples"
      ]
    },
    "/(examples)/_examples": {
      "filePath": "(examples)/_examples.tsx",
      "parent": "/(examples)",
      "children": [
        "/(examples)/_examples/examples",
        "/(examples)/_examples/form",
        "/(examples)/_examples/query"
      ]
    },
    "/_auth/dashboard": {
      "filePath": "_auth.dashboard.tsx",
      "parent": "/_auth"
    },
    "/_docs/docs": {
      "filePath": "_docs.docs.tsx",
      "parent": "/_docs"
    },
    "/(examples)/_examples/examples": {
      "filePath": "(examples)/_examples/examples.tsx",
      "parent": "/(examples)/_examples"
    },
    "/(examples)/_examples/form": {
      "filePath": "(examples)/_examples/form.lazy.tsx",
      "parent": "/(examples)/_examples"
    },
    "/(examples)/_examples/query": {
      "filePath": "(examples)/_examples/query.lazy.tsx",
      "parent": "/(examples)/_examples"
    }
  }
}
ROUTE_MANIFEST_END */
